// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  parentId  Int?
  parent    Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children  Category[] @relation("SubCategories")
  products  Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  name          String
  passwordHash  String
  phone         String?
  createdAt     DateTime   @default(now())
  addresses     Address[]
  reviews       Review[]
  orders        Order[]
  cartItems     CartItem[]
}

model Address {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  addressLine1 String
  addressLine2 String?
  city         String?
  postalCode   String?
  isDefault    Boolean  @default(false)
  orders       Order[]
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int
  totalAmount Float
  status      String      @default("PENDING") // PENDING, SHIPPED, DELIVERED, CANCELED
  createdAt   DateTime    @default(now())
  items       OrderItem[]
}

model OrderItem {
  id            Int     @id @default(autoincrement())
  order         Order   @relation(fields: [orderId], references: [id])
  orderId       Int
  product       Product @relation(fields: [productId], references: [id])
  productId     Int
  quantity      Int
  pricePerItem  Float
}

model CartItem {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}